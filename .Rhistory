library(glmnet)
library(ISLR)
fix(Hitters)
Hitters = na.omit(Hitters)
# The model.matrix() function can
# - produce a matrix corresponding to the 19 predictors and
# - automatically transforms any qualitative variables into dummy variables.
x = model.matrix(Salary ~ ., Hitters)[, -1]
x = model.matrix(Salary ~ ., Hitters)[, -1]
y = Hitters$Salary
grid = 10^seq(10, -2, length = 100)
ridge.mod = glmnet(x, y, alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
sqrt(sum(coef(ridge.mod)[-1, 50]^2))
ridge.mod$lambda[60]
sqrt(sum(coef(ridge.mod)[-1, 60]^2))
predict(ridge.mod, s = 50, type = "coefficients")
set.seed(1)
train = sample(1:nrow(x), size = nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.mod = glmnet(x[train, ], y[train], alpha = 0, lambda = grid,
thresh = 1e-12)
ridge.pred = predict(ridge.mod, s = 4, newx = x[test, ])
mean((ridge.pred-y.test)^2)  # test MSE = 142199.2
mean((ridge.pred-y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred = predict(ridge.mod, s = 1e10, newx = x[test, ])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s = 0, newx = x[test, ], exact = T,
x = x[train, ], y = y[train])
ridge.pred = predict(ridge.mod, s = 1e10, newx = x[test, ])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s = 0, newx = x[test, ], exact = T,
x = x[train, ], y = y[train])
mean((ridge.pred-y.test)^2)
lm(y ~ x, subset = train)
predict(ridge.mod, s = 0, exact = T, type = "coefficients", x = x[train, ],
y = y[train])[1:20, ]
set.seed(1)
cv.out = cv.glmnet(x[train, ], y[train], alpha = 0)
plot(cv.out)
bestlam = cv.out$lambda.min
bestlam
lasso.mod = glmnet(x[train, ], y[train], alpha = 1, lambda = grid)
plot(lasso.mod)
set.seed(1)
cv.out = cv.glmnet(x[train, ], y[train], alpha = 1)
plot(cv.out)
bestlam = cv.out$lambda.min
bestlam
lasso.pred = predict(lasso.mod, s = bestlam, newx = x[test, ])
mean((lasso.pred-y.test)^2)
out = glmnet(x, y, alpha = 1, lambda = grid)
lasso.coef = predict(out, type = "coefficients", s = bestlam)[1:20,]
lasso.coef
length(lasso.coef[lasso.coef!=0])
